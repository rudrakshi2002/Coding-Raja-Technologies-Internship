import cv2
import torch
import torchvision.transforms as T
from torchvision.models.detection import fasterrcnn_resnet50_fpn

# Load a pre-trained Faster R-CNN model
model = fasterrcnn_resnet50_fpn(pretrained=True)
model.eval()

# Initialize the video capture
cap = cv2.VideoCapture("your_video_stream.mp4")

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Convert the frame to a PyTorch tensor
    transform = T.Compose([T.ToTensor()])
    input_image = transform(frame)

    # Perform object detection
    with torch.no_grad():
        prediction = model([input_image])

    # Display detected objects and tracking
    # You can use SORT or other tracking algorithms here.

    # Draw bounding boxes and labels on the frame
    for score, label, box in zip(prediction[0]['scores'], prediction[0]['labels'], prediction[0]['boxes']):
        if score > 0.7:  # Set a threshold for detection confidence
            x, y, w, h = map(int, box)
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(frame, f'Class: {label}', (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    cv2.imshow("Object Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
